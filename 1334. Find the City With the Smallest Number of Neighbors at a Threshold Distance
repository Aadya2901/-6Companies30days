#include <vector>
#include <climits>
#include <algorithm>
using namespace std;

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        // Initialize the distance matrix
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));

        for (int i = 0; i < n; i++) {
            dist[i][i] = 0; // Distance from a city to itself is 0
        }

        // Set initial distances based on the edges
        for (const auto& edge : edges) {
            int from = edge[0];
            int to = edge[1];
            int weight = edge[2];
            dist[from][to] = weight;
            dist[to][from] = weight; // Since the graph is bidirectional
        }

        // Floyd-Warshall Algorithm to find the shortest paths between all pairs of cities
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }

        // Count reachable cities within distance threshold for each city
        int minReachable = n;
        int resultCity = -1;

        for (int i = 0; i < n; i++) {
            int count = 0;

            for (int j = 0; j < n; j++) {
                if (dist[i][j] <= distanceThreshold) {
                    count++;
                }
            }

            // If the number of reachable cities is smaller, or if the same but the city index is greater
            if (count < minReachable || (count == minReachable && i > resultCity)) {
                minReachable = count;
                resultCity = i;
            }
        }

        return resultCity;
    }
};

