#include <vector>
#include <unordered_map>
#include <tuple>
#include <algorithm>
using namespace std;

class Solution {
private:
    struct VectorHash {
        size_t operator()(const vector<int>& v) const {
            size_t hash = 0;
            for (int n : v) {
                hash = hash * 31 + n;
            }
            return hash;
        }
    };

public:
    unordered_map<vector<int>, int, VectorHash> dp;

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return dfs(price, special, needs);
    }

    int dfs(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        if (dp.find(needs) != dp.end()) {
            return dp[needs];
        }

        // Calculate the cost without any special offers
        int cost = 0;
        for (int i = 0; i < needs.size(); ++i) {
            cost += needs[i] * price[i];
        }

        // Try using each special offer
        for (auto& offer : special) {
            vector<int> new_needs(needs);
            bool valid = true;
            for (int i = 0; i < needs.size(); ++i) {
                if (new_needs[i] < offer[i]) {
                    valid = false;
                    break;
                }
                new_needs[i] -= offer[i];
            }
            if (valid) {
                cost = min(cost, offer.back() + dfs(price, special, new_needs));
            }
        }

        dp[needs] = cost;
        return cost;
    }
};
